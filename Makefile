
PWD := $(CURDIR)
LINUX_SRC := ./linux-4.1.10
KERNEL_BUILD := $(PWD)/kernel
EXPLOIT_SRC := ./exploit
ROOT_FS := $(PWD)/rootfs/root

KERNEL_CONFIG := kernel/.config
KERNEL_ZIMAGE := kernel/arch/arm/boot/zImage

obj-m += exm.o
exm-y := $(EXPLOIT_SRC)/src/module/module.o

ccflags-y += -I../exploit/include

EXPLOIT_INCLUDES := $(shell find $(EXPLOIT_SRC)/include -type f -name "*.h")

CROSS := CROSS_COMPILE=arm-linux-gnueabi- ARCH=arm # KBUILD_CFLAGS=-D__GNUC__=5 

all: kernel rootfs/root.sqfs

$(LINUX_SRC):
	curl -o - https://cdn.kernel.org/pub/linux/kernel/v4.x/linux-4.1.10.tar.xz | unxz - | tar x
	patch -p1 -N < kernel.patch

linux_src: $(LINUX_SRC)

$(KERNEL_CONFIG): defconfig
	mkdir $(KERNEL_BUILD) || true
	cp $< $(KERNEL_BUILD)/.config
	$(MAKE) $(CROSS) -C $(LINUX_SRC) O=$(KERNEL_BUILD) olddefconfig

config: $(KERNEL_CONFIG)

$(KERNEL_ZIMAGE): $(LINUX_SRC) $(KERNEL_CONFIG)
	$(MAKE) $(CROSS) -C $(LINUX_SRC) O=$(KERNEL_BUILD) -j8 zImage

kernel: $(KERNEL_ZIMAGE)

menuconfig:
	$(MAKE) $(CROSS) -C $(LINUX_SRC) O=$(KERNEL_BUILD) MENUCONFIG_COLOR=blackbg menuconfig

FORCE:

exploit/exploit: exploit/headers FORCE
	$(MAKE) -C exploit

$(ROOT_FS)/exploit: exploit/exploit
	cp $< $@

exploit_install: $(ROOT_FS)/exploit

exm.ko: $(shell find $(EXPLOIT_SRC)/src/module -type f -name "*.c") $(EXPLOIT_INCLUDES)
	$(MAKE) $(CROSS) -C $(LINUX_SRC) M=$(PWD) O=$(KERNEL_BUILD) modules

exploit/headers:
	$(MAKE) $(CROSS) -C $(LINUX_SRC) headers_install INSTALL_HDR_PATH=$(PWD)/$@

modules: exm.ko


$(ROOT_FS)/lib/modules/*/extra/exm.ko: exm.ko
	$(MAKE) $(CROSS) -C $(LINUX_SRC) M=$(PWD) O=$(KERNEL_BUILD) INSTALL_MOD_PATH=$(ROOT_FS) modules_install

modules_install: $(ROOT_FS)/lib/modules/*/extra/exm.ko

modules_clean:
	$(MAKE) $(CROSS) -C $(LINUX_SRC) M=$(PWD) O=$(KERNEL_BUILD) clean

clean: modules_clean

rootfs/root.sqfs: exploit_install modules_install
	$(MAKE) -C rootfs

compile_commands.json:
	make -Bn modules | compiledb
	make -Bn -C exploit build_exploit | compiledb -d $(PWD)/exploit

compdb: compile_commands.json

run: kernel rootfs/root.sqfs
	qemu-system-arm -M virt -m 256 -smp cores=4 -nographic \
		-kernel kernel/arch/arm/boot/zImage -append "root=/dev/vda rw" \
		-drive if=none,format=raw,file=rootfs/root.sqfs,id=rootfs -device virtio-blk-pci,drive=rootfs